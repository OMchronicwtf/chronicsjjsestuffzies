return function(Rayfield, Window)
    local AutoFarmTab = Window:CreateTab("AutoFarm", 4483362458)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")
    local RunService = game:GetService("RunService")
    local M1Event = game:GetService("ReplicatedStorage").Resource.Remotes.M1
    local QuestEvent = game:GetService("ReplicatedStorage").Resource.Remotes.Bindable.Compliments

    -- Handle character respawn
    player.CharacterAdded:Connect(function(newChar)
        character = newChar
        hrp = newChar:WaitForChild("HumanoidRootPart")
    end)

    -- State variables
    local autoFarmEnabled = false
    local autoFarmConnection
    local superKillEnabled = false
    local farmSpecificQuests = false
    local currentHealthConnection
    local selectedQuests = {}
    local currentQuestIndex = 1
    local questStartDelay = 0.5
    local autoUpdateStatus = false

    -- Quest data
    local quests = {
        {MinLevel = 1, QuestName = "The Start", DisplayName = "Level 1 → The Start"},
        {MinLevel = 10, QuestName = "Quest 1", DisplayName = "Level 10 → Quest 1"},
        {MinLevel = 20, QuestName = "Quest 2", DisplayName = "Level 20 → Quest 2"},
        {MinLevel = 35, QuestName = "Quest 3", DisplayName = "Level 35 → Quest 3"},
        {MinLevel = 50, QuestName = "Quest 4", DisplayName = "Level 50 → Quest 4"},
        {MinLevel = 75, QuestName = "Quest 5", DisplayName = "Level 75 → Quest 5"},
        {MinLevel = 100, QuestName = "Quest 6", DisplayName = "Level 100 → Quest 6"},
        {MinLevel = 125, QuestName = "Quest 7", DisplayName = "Level 125 → Quest 7"},
        {MinLevel = 150, QuestName = "Quest 8", DisplayName = "Level 150 → Quest 8"},
        {MinLevel = 200, QuestName = "Quest 9", DisplayName = "Level 200 → Quest 9"},
        {MinLevel = 250, QuestName = "Quest 10", DisplayName = "Level 250 → Quest 10"},
        {MinLevel = 300, QuestName = "Quest 11", DisplayName = "Level 300 → Quest 11"},
        {MinLevel = 350, QuestName = "Quest 12", DisplayName = "Level 350 → Quest 12"},
        {MinLevel = 400, QuestName = "Quest 13", DisplayName = "Level 400 → Quest 13"},
        {MinLevel = 450, QuestName = "Quest 14", DisplayName = "Level 450 → Quest 14"},
        {MinLevel = 500, QuestName = "Quest 15", DisplayName = "Level 500 → Quest 15"},
        {MinLevel = 550, QuestName = "Quest 16", DisplayName = "Level 550 → Quest 16"},
        {MinLevel = 600, QuestName = "Quest 17", DisplayName = "Level 600 → Quest 17"},
        {MinLevel = 650, QuestName = "Quest 18", DisplayName = "Level 650 → Quest 18"},
        {MinLevel = 700, QuestName = "Quest 19", DisplayName = "Level 700 → Quest 19"},
        {MinLevel = 750, QuestName = "Quest 20", DisplayName = "Level 750 → Quest 20"},
        {MinLevel = 800, QuestName = "Quest 21", DisplayName = "Level 800 → Quest 21"},
    }

    -- Teleport zones
    local areaTeleports = {
        {Min = 1, Max = 50, CFrame = CFrame.new(-342.96, 11.42, -271.92)},
        {Min = 75, Max = 200, CFrame = CFrame.new(607.02, 55.88, -345.22)},
        {Min = 200, Max = 500, CFrame = CFrame.new(526.34, 11.83, 778.68)},
        {Min = 500, Max = math.huge, CFrame = CFrame.new(1244.57, 53.17, -1478.92)},
    }

    -- Player info and stats UI
    local InfoParagraph = AutoFarmTab:CreateParagraph({
        Title = "Player Info",
        Content = "Toggle 'Auto Update Status' to view info"
    })

    local StatsParagraph = AutoFarmTab:CreateParagraph({
        Title = "Player Stats",
        Content = "Toggle 'Auto Update Status' to view stats"
    })

    -- Helper functions
    local function GetLevelBasedQuest()
        local level = player:WaitForChild("Data"):WaitForChild("Level").Value
        local selectedQuest
        for _, quest in ipairs(quests) do
            if level >= quest.MinLevel then
                selectedQuest = quest
            end
        end
        return selectedQuest
    end

    local function FindEnemyForQuest(quest)
        if not quest then return nil end
        local targetLevel = quest.MinLevel
        for _, mob in pairs(workspace.Mobs:GetChildren()) do
            local levelNum = tonumber(mob.Name:match("Lv(%d+)"))
            if levelNum == targetLevel and mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") then
                return mob
            end
        end
        return nil
    end

    local function TeleportToQuestArea(level)
        for _, area in ipairs(areaTeleports) do
            if level >= area.Min and level <= area.Max then
                hrp.CFrame = area.CFrame
                break
            end
        end
    end

    local function IsQuestComplete()
        local questFrame = player.PlayerGui:FindFirstChild("Quest") and player.PlayerGui.Quest:FindFirstChild("Mission")
        local repeatFrame = player.PlayerGui:FindFirstChild("Quest") and player.PlayerGui.Quest:FindFirstChild("Repeat")
        local isInQuest = questFrame and questFrame.Visible
        local canRepeat = repeatFrame and repeatFrame.Visible
        return not isInQuest and canRepeat
    end

    local function StartQuest(quest)
        if not quest then return end
        local questFrame = player.PlayerGui:FindFirstChild("Quest") and player.PlayerGui.Quest:FindFirstChild("Mission")
        local repeatFrame = player.PlayerGui:FindFirstChild("Quest") and player.PlayerGui.Quest:FindFirstChild("Repeat")
        local isInQuest = questFrame and questFrame.Visible
        local currentTitle = isInQuest and questFrame.Frame.Title.Text or ""
        local canRepeat = repeatFrame and repeatFrame.Visible

        if not isInQuest or currentTitle ~= quest.DisplayName then
            if canRepeat or not isInQuest then
                QuestEvent:FireServer({Type = "RemoveQuest"})
                task.wait(questStartDelay)
                QuestEvent:FireServer({Quest = quest.QuestName, Type = "RepeatQuest"})
            end
        end
    end

    local function ApplySuperKill(enemy)
        if currentHealthConnection then
            currentHealthConnection:Disconnect()
            currentHealthConnection = nil
        end
        if enemy and enemy:FindFirstChild("Humanoid") and superKillEnabled then
            local humanoid = enemy.Humanoid
            currentHealthConnection = humanoid.HealthChanged:Connect(function()
                humanoid.Health = 0
            end)
        end
    end

    local function UpdatePlayerInfo()
        -- Player Info
        local areaHandler = player.PlayerGui:FindFirstChild("Area") and player.PlayerGui.Area:FindFirstChild("Handler")
        local currentArea = areaHandler and areaHandler:FindFirstChild("Value") and areaHandler.Value.Value or "Unknown"

        local dialogueGui = player.PlayerGui:FindFirstChild("Dialogue")
        local inDialogue = dialogueGui and dialogueGui.Enabled and "Yes" or "No"

        local questFrame = player.PlayerGui:FindFirstChild("Quest") and player.PlayerGui.Quest:FindFirstChild("Mission")
        local questStatus = questFrame and questFrame.Visible and "In Quest" or "Not in Quest"
        local currentQuestTitle = questFrame and questFrame.Visible and questFrame.Frame.Title.Text or "None"

        local repeatFrame = player.PlayerGui:FindFirstChild("Quest") and player.PlayerGui.Quest:FindFirstChild("Repeat")
        local repeatStatus = repeatFrame and repeatFrame.Visible and "Can Repeat" or "Cannot Repeat"

        local mobileGui = player.PlayerGui:FindFirstChild("Mobile")
        local platform = mobileGui and mobileGui.Enabled and "Mobile" or "PC"

        local bossNameValue = player.PlayerGui:FindFirstChild("BossName")
        local lastBoss = bossNameValue and bossNameValue.Value or "None"

        local infoStats = {
            {Name = "Platform", Value = platform},
            {Name = "Current Area", Value = currentArea},
            {Name = "In Dialogue", Value = inDialogue},
            {Name = "Quest Status", Value = questStatus},
            {Name = "Current Quest", Value = currentQuestTitle},
            {Name = "Repeat Quest", Value = repeatStatus},
            {Name = "Last Boss Attacked", Value = lastBoss}
        }

        local infoText = ""
        for _, stat in ipairs(infoStats) do
            infoText = infoText .. stat.Name .. ": " .. stat.Value .. "\n"
        end

        InfoParagraph:Set({
            Title = "Player Info",
            Content = infoText
        })

        -- Player Stats
        local dataFolder = player:FindFirstChild("Data")
        local statValues = {
            {Name = "Level", Value = dataFolder and dataFolder:FindFirstChild("Level") and dataFolder.Level.Value or "N/A"},
            {Name = "Cash", Value = dataFolder and dataFolder:FindFirstChild("Cash") and dataFolder.Cash.Value or "N/A"},
            {Name = "Gems", Value = dataFolder and dataFolder:FindFirstChild("Gems") and dataFolder.Gems.Value or "N/A"},
            {Name = "Stamina", Value = dataFolder and dataFolder:FindFirstChild("Stamina") and dataFolder.Stamina.Value or "N/A"},
            {Name = "Max Stamina", Value = dataFolder and dataFolder:FindFirstChild("MaxStamina") and dataFolder.MaxStamina.Value or "N/A"},
            {Name = "Respect", Value = dataFolder and dataFolder:FindFirstChild("Respect") and dataFolder.Respect.Value or "N/A"},
            {Name = "Stat Points", Value = dataFolder and dataFolder:FindFirstChild("Points") and dataFolder.Points.Value or "N/A"}
        }

        local statsText = ""
        for _, stat in ipairs(statValues) do
            statsText = statsText .. stat.Name .. ": " .. stat.Value .. "\n"
        end

        StatsParagraph:Set({
            Title = "Player Stats",
            Content = statsText
        })
    end

    -- Auto-update status loop
    task.spawn(function()
        while true do
            if autoUpdateStatus then
                UpdatePlayerInfo()
            end
            task.wait(1)
        end
    end)

    -- Auto-farm logic
    local function StartAutoFarm()
        if autoFarmConnection then return end
        autoFarmEnabled = true
        currentQuestIndex = 1

        autoFarmConnection = RunService.Heartbeat:Connect(function()
            if not autoFarmEnabled then return end

            local quest
            if farmSpecificQuests and #selectedQuests > 0 then
                quest = selectedQuests[currentQuestIndex]
            else
                quest = GetLevelBasedQuest()
            end

            if quest then
                TeleportToQuestArea(quest.MinLevel)

                if farmSpecificQuests and #selectedQuests > 1 and IsQuestComplete() then
                    currentQuestIndex = (currentQuestIndex % #selectedQuests) + 1
                    quest = selectedQuests[currentQuestIndex]
                end
                StartQuest(quest)

                local enemy = FindEnemyForQuest(quest)
                if enemy and enemy.Parent and enemy:FindFirstChild("HumanoidRootPart") then
                    local enemyHRP = enemy.HumanoidRootPart
                    local behindPos = enemyHRP.Position - (enemyHRP.CFrame.LookVector * 5)
                    hrp.CFrame = CFrame.new(behindPos, enemyHRP.Position)
                    ApplySuperKill(enemy)
                    M1Event:FireServer({
                        type = "M1",
                        InAir = false,
                        UpTilt = false
                    })
                end
            end
        end)
    end

    local function StopAutoFarm()
        autoFarmEnabled = false
        if autoFarmConnection then
            autoFarmConnection:Disconnect()
            autoFarmConnection = nil
        end
        if currentHealthConnection then
            currentHealthConnection:Disconnect()
            currentHealthConnection = nil
        end
    end

    -- UI setup
    AutoFarmTab:CreateSection("Main AutoFarm")
    AutoFarmTab:CreateToggle({
        Name = "Enable AutoFarm",
        CurrentValue = false,
        Flag = "AutoFarmToggle",
        Callback = function(state)
            if state then
                StartAutoFarm()
            else
                StopAutoFarm()
            end
        end
    })

    AutoFarmTab:CreateToggle({
        Name = "Enable SuperKill",
        CurrentValue = false,
        Flag = "SuperKillToggle",
        Callback = function(state)
            superKillEnabled = state
        end
    })

    AutoFarmTab:CreateSection("Farm Specific Quests")
    local questOptions = {}
    for _, quest in ipairs(quests) do
        table.insert(questOptions, quest.DisplayName)
    end

    AutoFarmTab:CreateDropdown({
        Name = "Choose Quests to Farm",
        Options = questOptions,
        CurrentOption = {},
        MultipleOptions = true,
        Flag = "FarmQuestDropdown",
        Callback = function(options)
            selectedQuests = {}
            for _, questName in ipairs(options) do
                for _, quest in ipairs(quests) do
                    if quest.DisplayName == questName then
                        table.insert(selectedQuests, quest)
                        break
                    end
                end
            end
            table.sort(selectedQuests, function(a, b) return a.MinLevel > b.MinLevel end)
            currentQuestIndex = 1
        end
    })

    AutoFarmTab:CreateToggle({
        Name = "Farm Specific Quests",
        CurrentValue = false,
        Flag = "FarmSpecificToggle",
        Callback = function(state)
            farmSpecificQuests = state
            if state and #selectedQuests > 0 then
                currentQuestIndex = 1
            end
        end
    })

    AutoFarmTab:CreateSection("Player Status")
    AutoFarmTab:CreateToggle({
        Name = "Auto Update Status",
        CurrentValue = false,
        Flag = "AutoUpdateStatus",
        Callback = function(state)
            autoUpdateStatus = state
            if state then
                UpdatePlayerInfo()
            end
        end
    })
end
